name: 'deploy on production'
on:
  workflow_dispatch

jobs:
  deploy:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
    - name: SSH into the Server and Run docker-compose
      env:
        PROD_PWD: ${{ secrets.PROD_PWD }}
        PROD_ADMIN: ${{ secrets.PROD_ADMIN }}
        PROD_HOSTNAME: ${{ secrets.PROD_HOSTNAME }}
        TUS_GH_USER: ${{ secrets.TUS_GH_USER }}
        GHCR_PAT: ${{ secrets.GHCR_PAT }}
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWD }}
        MYSQL_DATABASE: ${{secrets.MYSQL_DATABASE}}
        MYSQL_USER: ${{secrets.MYSQL_USER}}
        MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
      run: |
        sshpass -p $PROD_PWD ssh -tt -o StrictHostKeyChecking=no $PROD_ADMIN@$PROD_HOSTNAME << EOF
          docker login ghcr.io -u $TUS_GH_USER -p $GHCR_PAT
          if [[ -f "LC-Deployment" ]]
          then
            echo "LC-Deployment exists."
          else
            git clone git@github.com:SIT-LightCode/LC-Deployment.git
          fi          

          cd ~/LC-Deployment
          export MYSQL_ROOT_PASSWORD=$MYSQL_DATABASE
          export MYSQL_DATABASE=$MYSQL_DATABASE
          export MYSQL_USER=$MYSQL_USER
          export MYSQL_PASSWORD=$MYSQL_PASSWORD
          if [[ -f "mysql.env" ]]
          then
            rm -rf mysql.env
          else
            echo "mysql.env does not exist."
          fi
          envsubst < mysql.env.tmpl > mysql.env

          if [[ -f "backend.env" ]]
          then
            rm -rf backend.env
          else
            echo "backend.env does not exist."
          fi
          envsubst < backend.env.tmpl > backend.env
          
          git pull
          docker-compose pull
          docker-compose up -d
          exit
        EOF
    - name: run hostname
      run: hostname

